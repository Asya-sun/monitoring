#include "postgres.h"
#include "storage/proc.h"
#include "storage/procarray.h"
#include "utils/ps_status.h"

#include "replication/logicallauncher.h"
#include "commands/dbcommands.h"
#include "utils/acl.h"
#include "catalog/pg_authid.h"
#include "miscadmin.h"

#define UINT32_ACCESS_ONCE(var)		 ((uint32)(*((volatile uint32 *)&(var))))

#define HAS_PGSTAT_PERMISSIONS(role)	 (has_privs_of_role(GetUserId(), ROLE_PG_READ_ALL_STATS) || has_privs_of_role(GetUserId(), role))
// нужно дополнительно это
// define - они определены в каком-то ....c файле, поэтому их нельзя просто импортить (поэтому я вставила код сюда)


надо в ApplyWalRecord() куда-нибудь вставить это

void someActivityInfo(void) {
	int			num_backends = pgstat_fetch_stat_numbackends();
	int			curr_backend;
	for (curr_backend = 1; curr_backend <= num_backends; curr_backend++) {
		LocalPgBackendStatus *local_beentry;
		PgBackendStatus *beentry;
		PGPROC	   *proc;
		int32 leader_pid = 0;
		char *clipped_activity;
		char *type = "null";
		TimestampTz startProcTime = NULL;
		/* Get the next one in the list */
		local_beentry = pgstat_get_local_beentry_by_index(curr_backend);
		beentry = &local_beentry->backendStatus;

		switch (beentry->st_backendType)
		{
			case B_ARCHIVER:
				type = "B_ARCHIVER";
				break;
			case B_BG_WRITER:
				type = "B_BG_WRITER";
				break;
			case B_CHECKPOINTER:
				type = "B_CHECKPOINTER";
				break;
			case B_STARTUP:
				type = "B_STARTUP";
				break;	
			default:
				type = "NULL";
				break;
		}

		

		// if (HAS_PGSTAT_PERMISSIONS(beentry->st_userid)) {
			clipped_activity = pgstat_clip_activity(beentry->st_activity_raw);
			proc = BackendPidGetProc(beentry->st_procpid);
			if (proc == NULL && (beentry->st_backendType != B_BACKEND))
			{
				/*
				 * For an auxiliary process, retrieve process info from
				 * AuxiliaryProcs stored in shared-memory.
				 */
				proc = AuxiliaryPidGetProc(beentry->st_procpid);
			}
			if (proc != NULL)
			{
				uint32		raw_wait_event;
				PGPROC	   *leader;
				raw_wait_event = UINT32_ACCESS_ONCE(proc->wait_event_info);
				leader = proc->lockGroupLeader;
				/*
				 * Show the leader only for active parallel workers.  This
				 * leaves the field as NULL for the leader of a parallel group
				 * or the leader of parallel apply workers.
				 */
				if (leader && leader->pid != beentry->st_procpid)
				{
					leader_pid = leader->pid;
				}
				else if (beentry->st_backendType == B_BG_WORKER)
				{
					leader_pid = GetLeaderApplyWorkerPid(beentry->st_procpid);
				}
			}
			// it might be 0
			startProcTime = beentry->st_proc_start_timestamp;
			elog(LOG, "[Recovery] PID=%d LEADER_PID=%d StartTime=%ld BACKEND_TYPE=%s", 
				proc->pid, leader_pid, (long)startProcTime, type);
			pfree(clipped_activity);
		// }
	
	}
}


Пример Логов:
2025-04-01 21:35:33.575 +07 [81524] LOG:  [Recovery] PID=81522 LEADER_PID=0 StartTime=796833330368711 BACKEND_TYPE=B_CHECKPOINTER
2025-04-01 21:35:33.575 +07 [81524] LOG:  [Recovery] PID=81523 LEADER_PID=0 StartTime=796833330368920 BACKEND_TYPE=B_BG_WRITER
2025-04-01 21:35:33.575 +07 [81524] LOG:  [Recovery] PID=81524 LEADER_PID=0 StartTime=796833330369155 BACKEND_TYPE=B_STARTUP
